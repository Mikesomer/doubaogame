<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>贪吃蛇游戏</title>
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f4f4f9;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        #score {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }

        #game-board {
            display: grid;
            gap: 2px;
            background-color: #333;
            margin-top: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
        }

        .cell {
            background-color: #444;
            border-radius: 4px;
        }

        .snake {
            background-color: #2ecc71;
            border-radius: 4px;
        }

        .snake-head {
            background-color: #27ae60;
        }

        .food {
            background-color: #e74c3c;
            border-radius: 4px;
        }

        .eat-effect {
            animation: eat 0.3s ease-in-out;
        }

        @keyframes eat {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        #start-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: rgba(255, 255, 255, 0.9);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
        }

        #start-screen h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #333;
        }

        #start-screen button {
            padding: 0.8rem 2rem;
            font-size: 1.2rem;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin: 0.5rem;
        }

        #start-screen button:hover {
            background-color: #2980b9;
        }

        #difficulty-screen {
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: rgba(255, 255, 255, 0.9);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
        }

        #difficulty-screen h2 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #333;
        }

        #difficulty-screen button {
            padding: 0.8rem 2rem;
            font-size: 1.2rem;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin: 0.5rem;
        }

        #difficulty-screen button:hover {
            background-color: #2980b9;
        }

        #game-over-screen {
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: rgba(255, 255, 255, 0.9);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
        }

        #game-over-screen h2 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #e74c3c;
        }

        #game-over-screen p {
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            color: #333;
        }

        #game-over-screen button {
            padding: 0.8rem 2rem;
            font-size: 1.2rem;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin: 0.5rem;
        }

        #game-over-screen button:hover {
            background-color: #2980b9;
        }
    </style>
</head>

<body>
    <div id="score">得分: 0</div>
    <div id="start-screen">
        <h1>贪吃蛇游戏</h1>
        <button id="start-button">开始游戏</button>
    </div>
    <div id="difficulty-screen">
        <h2>选择难度等级</h2>
        <button data-speed="200">等级 1</button>
        <button data-speed="150">等级 2</button>
        <button data-speed="100">等级 3</button>
        <button data-speed="75">等级 4</button>
        <button data-speed="50">等级 5</button>
    </div>
    <div id="game-board" style="display: none;"></div>
    <div id="game-over-screen">
        <h2>游戏失败</h2>
        <p>你的得分是: <span id="final-score"></span></p>
        <button id="restart-button">重新开始</button>
        <button id="return-start-button">返回游戏开始界面</button>
    </div>
    <audio id="eat-sound" src="https://www.soundjay.com/button/beep-07.wav" preload="auto"></audio>
    <audio id="game-over-sound" src="https://www.soundjay.com/button/beep-06.wav" preload="auto"></audio>
    <script>
        let boardSize = 20;
        const gameBoard = document.getElementById('game-board');
        let snake = [{ x: 0, y: 0 }];
        let food = { x: Math.floor(Math.random() * boardSize), y: Math.floor(Math.random() * boardSize) };
        let direction = 'right';
        let gameInterval;
        let score = 0;
        const scoreElement = document.getElementById('score');
        const eatSound = document.getElementById('eat-sound');
        const gameOverSound = document.getElementById('game-over-sound');
        const gameOverScreen = document.getElementById('game-over-screen');
        const finalScoreElement = document.getElementById('final-score');
        const startScreen = document.getElementById('start-screen');
        const difficultyScreen = document.getElementById('difficulty-screen');
        let gameSpeed;

        function createBoard() {
            gameBoard.innerHTML = '';
            const availableWidth = window.innerWidth * 0.8;
            const availableHeight = window.innerHeight * 0.8;
            const cellSize = Math.min(availableWidth / boardSize, availableHeight / boardSize);
            gameBoard.style.gridTemplateColumns = `repeat(${boardSize}, ${cellSize}px)`;
            gameBoard.style.gridTemplateRows = `repeat(${boardSize}, ${cellSize}px)`;

            for (let y = 0; y < boardSize; y++) {
                for (let x = 0; x < boardSize; x++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    gameBoard.appendChild(cell);
                }
            }
        }

        function drawSnake() {
            const cells = gameBoard.querySelectorAll('.cell');
            snake.forEach((segment, index) => {
                const cellIndex = segment.y * boardSize + segment.x;
                const cell = cells[cellIndex];
                cell.classList.add('snake');
                if (index === 0) {
                    cell.classList.add('snake-head');
                } else {
                    cell.classList.remove('snake-head');
                }
            });
        }

        function drawFood() {
            const cells = gameBoard.querySelectorAll('.cell');
            const index = food.y * boardSize + food.x;
            cells[index].classList.add('food');
        }

        function moveSnake() {
            const head = { ...snake[0] };
            switch (direction) {
                case 'right':
                    head.x++;
                    break;
                case 'left':
                    head.x--;
                    break;
                case 'up':
                    head.y--;
                    break;
                case 'down':
                    head.y++;
                    break;
            }
            snake.unshift(head);
            if (head.x === food.x && head.y === food.y) {
                food = { x: Math.floor(Math.random() * boardSize), y: Math.floor(Math.random() * boardSize) };
                score++;
                scoreElement.textContent = `得分: ${score}`;
                eatSound.play();
                const foodCell = gameBoard.children[food.y * boardSize + food.x];
                foodCell.classList.add('eat-effect');
                setTimeout(() => {
                    foodCell.classList.remove('eat-effect');
                }, 300);
            } else {
                snake.pop();
            }
        }

        function checkCollision() {
            const head = snake[0];
            if (head.x < 0 || head.x >= boardSize || head.y < 0 || head.y >= boardSize) {
                return true;
            }
            for (let i = 1; i < snake.length; i++) {
                if (snake[i].x === head.x && snake[i].y === head.y) {
                    return true;
                }
            }
            return false;
        }

        function updateGame() {
            const cells = gameBoard.querySelectorAll('.cell');
            cells.forEach(cell => {
                cell.classList.remove('snake', 'snake-head', 'food');
            });
            moveSnake();
            if (checkCollision()) {
                clearInterval(gameInterval);
                gameOverSound.play();
                finalScoreElement.textContent = score;
                gameOverScreen.style.display = 'flex';
                gameBoard.style.display = 'none';
                return;
            }
            drawSnake();
            drawFood();
        }

        function handleKeyPress(event) {
            switch (event.key) {
                case 'ArrowRight':
                    if (direction!== 'left') direction = 'right';
                    break;
                case 'ArrowLeft':
                    if (direction!== 'right') direction = 'left';
                    break;
                case 'ArrowUp':
                    if (direction!== 'down') direction = 'up';
                    break;
                case 'ArrowDown':
                    if (direction!== 'up') direction = 'down';
                    break;
            }
        }

        function startGame() {
            startScreen.style.display = 'none';
            difficultyScreen.style.display = 'flex';
        }

        function startGameWithDifficulty(speed) {
            gameSpeed = speed;
            difficultyScreen.style.display = 'none';
            gameBoard.style.display = 'grid';
            snake = [{ x: 0, y: 0 }];
            food = { x: Math.floor(Math.random() * boardSize), y: Math.floor(Math.random() * boardSize) };
            direction = 'right';
            score = 0;
            scoreElement.textContent = `得分: ${score}`;
            createBoard();
            drawSnake();
            drawFood();
            gameInterval = setInterval(updateGame, gameSpeed);
            document.addEventListener('keydown', handleKeyPress);
        }

        function restartGame() {
            gameOverScreen.style.display = 'none';
            startGameWithDifficulty(gameSpeed);
        }

        function returnToStart() {
            gameOverScreen.style.display = 'none';
            startScreen.style.display = 'flex';
        }

        document.getElementById('start-button').addEventListener('click', startGame);
        const difficultyButtons = difficultyScreen.querySelectorAll('button');
        difficultyButtons.forEach(button => {
            button.addEventListener('click', () => {
                const speed = parseInt(button.dataset.speed);
                startGameWithDifficulty(speed);
            });
        });
        document.getElementById('restart-button').addEventListener('click', restartGame);
        document.getElementById('return-start-button').addEventListener('click', returnToStart);

        window.addEventListener('resize', createBoard);
    </script>
</body>

</html>
    
